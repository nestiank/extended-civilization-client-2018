<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CivObservable</name>
    </assembly>
    <members>
        <member name="T:CivObservable.FixedEvent`1">
            <summary>
            Represents a fixed event.
            </summary>
            <typeparam name="FixedReceiver">The type of the fixed event receiver.</typeparam>
            <seealso cref="T:CivObservable.IFixedEventReceiver`1"/>
            <seealso cref="T:CivObservable.ObservableEvent`2"/>
            <seealso cref="T:CivObservable.FixedObservableEvent`3"/>
        </member>
        <member name="M:CivObservable.FixedEvent`1.#ctor(System.Func{System.Collections.Generic.IEnumerable{CivObservable.IFixedEventReceiver{`0}}})">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.FixedEvent`1"/> class by children supplier.
            </summary>
            <param name="childrenSupplier">The function that returns children of root in fixed event hierarchy.</param>
            <exception cref="T:System.ArgumentNullException">childrenSupplier is <c>null</c>.</exception>
        </member>
        <member name="M:CivObservable.FixedEvent`1.#ctor(CivObservable.IFixedEventReceiver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.FixedEvent`1"/> class by a specific root receiver.
            </summary>
            <param name="fixedRoot">The root receiver in fixed event hierarchy.</param>
            <exception cref="T:System.ArgumentNullException">fixedRoot is <c>null</c>.</exception>
        </member>
        <member name="M:CivObservable.FixedEvent`1.RaiseFixedForward(System.Action{`0})">
            <summary>
            Raises the fixed event in the direction of forward DFS.
            </summary>
            <param name="action">The action to be called with receiver.</param>
        </member>
        <member name="M:CivObservable.FixedEvent`1.RaiseFixedBackward(System.Action{`0})">
            <summary>
            Raises the fixed event in the direction of backward DFS.
            </summary>
            <param name="action">The action to be called with receiver.</param>
        </member>
        <member name="T:CivObservable.FixedEventReceiver">
            <summary>
            The static class provides methods to raise a fixed event.
            </summary>
        </member>
        <member name="M:CivObservable.FixedEventReceiver.RaiseDownForward``1(CivObservable.IFixedEventReceiver{``0},System.Action{``0})">
            <summary>
            Raises a fixed event with the specific root of hierarchy, in the direction of forward DFS.
            </summary>
            <typeparam name="T">The type of receiver.</typeparam>
            <param name="root">The root of fixed event hierarchy.</param>
            <param name="action">The action to be called with receiver.</param>
        </member>
        <member name="M:CivObservable.FixedEventReceiver.RaiseDownBackward``1(CivObservable.IFixedEventReceiver{``0},System.Action{``0})">
            <summary>
            Raises a fixed event with the specific root of hierarchy, in the direction of backward DFS.
            </summary>
            <typeparam name="T">The type of receiver.</typeparam>
            <param name="root">The root of fixed event hierarchy.</param>
            <param name="action">The action to be called with receiver.</param>
        </member>
        <member name="T:CivObservable.FixedObservableEvent`3">
            <summary>
            Represents an event that is both a fixed event and an observable event.
            </summary>
            <typeparam name="Observer">The type of the observer.</typeparam>
            <typeparam name="Priority">
            The type of the priority. This must be enumeration type of <see cref="T:System.Int32"/> where all of values are non-negative.
            </typeparam>
            <typeparam name="FixedReceiver">The type of the fixed event receiver.</typeparam>
            <seealso cref="T:CivObservable.ObservableEvent`2" />
            <seealso cref="T:CivObservable.FixedEvent`1"/>
            <seealso cref="T:CivObservable.ObservableEvent`2"/>
        </member>
        <member name="P:CivObservable.FixedObservableEvent`3.AsFixedEvent">
            <summary>
            Gets this object as <see cref="T:CivObservable.FixedEvent`1"/>.
            </summary>
        </member>
        <member name="P:CivObservable.FixedObservableEvent`3.AsObservableEvent">
            <summary>
            Gets this object as <see cref="T:CivObservable.ObservableEvent`2"/>.
            </summary>
        </member>
        <member name="M:CivObservable.FixedObservableEvent`3.#ctor(System.Func{System.Collections.Generic.IEnumerable{CivObservable.IFixedEventReceiver{`2}}})">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.FixedObservableEvent`3"/> class by children supplier.
            </summary>
            <param name="childrenSupplier">The function that returns children of root in fixed event hierarchy.</param>
            <exception cref="T:System.ArgumentNullException">childrenSupplier is <c>null</c>.</exception>
        </member>
        <member name="M:CivObservable.FixedObservableEvent`3.#ctor(CivObservable.IFixedEventReceiver{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.FixedObservableEvent`3"/> class by a specific root receiver.
            </summary>
            <param name="fixedRoot">The root receiver in fixed event hierarchy.</param>
            <exception cref="T:System.ArgumentNullException">fixedRoot is <c>null</c>.</exception>
        </member>
        <member name="M:CivObservable.FixedObservableEvent`3.RaiseFixedForward(System.Action{`2})">
            <summary>
            Raises the fixed event in the direction of forward DFS.
            </summary>
            <param name="action">The action to be called with receiver.</param>
        </member>
        <member name="M:CivObservable.FixedObservableEvent`3.RaiseFixedBackward(System.Action{`2})">
            <summary>
            Raises the fixed event in the direction of backward DFS.
            </summary>
            <param name="action">The action to be called with receiver.</param>
        </member>
        <member name="T:CivObservable.IFixedEventReceiver`1">
            <summary>
            The interface represents an object which can receive fixed event.
            </summary>
            <typeparam name="T">The type of receiver</typeparam>
        </member>
        <member name="P:CivObservable.IFixedEventReceiver`1.Children">
            <summary>
            The children of this receiver, in the hierarchy of fixed event.
            </summary>
        </member>
        <member name="P:CivObservable.IFixedEventReceiver`1.Receiver">
            <summary>
            The receiver object.
            </summary>
        </member>
        <member name="T:CivObservable.IObservable`2">
            <summary>
            The interface represents an object observable by observer interface.
            </summary>
            <typeparam name="Observer">The type of observer.</typeparam>
            <typeparam name="Priority">The type of priority. This must be convertible to <see cref="T:System.Int32"/>.</typeparam>
        </member>
        <member name="M:CivObservable.IObservable`2.AddObserver(`0,`1)">
            <summary>
            Registers an observer object.
            </summary>
            <param name="observer">The observer.</param>
            <param name="priority">The priority of the observer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="priority"/> is invalid</exception>
            <exception cref="T:System.ArgumentException"><paramref name="observer"/> is already registered</exception>
            <seealso cref="M:CivObservable.IObservable`2.RemoveObserver(`0)"/>
        </member>
        <member name="M:CivObservable.IObservable`2.RemoveObserver(`0)">
            <summary>
            Removes a registered observer object.
            </summary>
            <param name="observer">The observer.</param>
            <exception cref="T:System.ArgumentException">observer is not registered</exception>
            <seealso cref="M:CivObservable.IObservable`2.AddObserver(`0,`1)"/>
        </member>
        <member name="T:CivObservable.NamespaceDoc">
            <summary>
            The <see cref="N:CivObservable"/> namespace of CivObservable.dll module
             provides the feature about fixed/observable event
            </summary>
        </member>
        <member name="T:CivObservable.NotifyingLinkedList`1">
            <summary>
            Represents a linked list that notifies its modification.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.NotifyingLinkedList`1"/> class.
            </summary>
            <param name="notifyHandler">the handler to call on notification.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.Contains(`0)">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.
            </summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            특정 <see cref="T:System.Collections.Generic.ICollection`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.
            </summary>
            <param name="array"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
            <param name="index"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex - arrayIndex is less than 0</exception>
            <exception cref="T:System.ArgumentException">The available space from arrayIndex to the end of the destination array is not enough</exception>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.Find(`0)">
            <summary>
            Finds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.FindLast(`0)">
            <summary>
            Finds the last.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.GetEnumerator">
            <summary>
            컬렉션을 반복하는 열거자를 반환합니다.
            </summary>
            <returns>
            컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.
            </returns>
        </member>
        <member name="P:CivObservable.NotifyingLinkedList`1.Last">
            <summary>
            Gets the last.
            </summary>
            <value>
            The last.
            </value>
        </member>
        <member name="P:CivObservable.NotifyingLinkedList`1.First">
            <summary>
            Gets the first.
            </summary>
            <value>
            The first.
            </value>
        </member>
        <member name="P:CivObservable.NotifyingLinkedList`1.Count">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에 포함된 요소 수를 가져옵니다.
            </summary>
        </member>
        <member name="P:CivObservable.NotifyingLinkedList`1.IsReadOnly">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds the after.
            </summary>
            <param name="node">The node.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the after.
            </summary>
            <param name="node">The node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds the before.
            </summary>
            <param name="node">The node.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the before.
            </summary>
            <param name="node">The node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddFirst(`0)">
            <summary>
            Adds the first.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the first.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddLast(`0)">
            <summary>
            Adds the last.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the last.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.Clear">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.
            </summary>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.Remove(`0)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.RemoveFirst">
            <summary>
            Removes the first.
            </summary>
        </member>
        <member name="M:CivObservable.NotifyingLinkedList`1.RemoveLast">
            <summary>
            Removes the last.
            </summary>
        </member>
        <member name="T:CivObservable.Observable`1">
            <summary>
            Represents an object observable by observer interface.
            </summary>
            <typeparam name="T">The observer interface to receive</typeparam>
            <remarks>
            <para>
            The observable object from which observers can be modified during event is raised.
            </para>
            <para>
            If observer is removed during event, the observer list is immediately affected.<br/>
            If observer is added during event, the effect on the observer list is delayed until event raising is finished,
            that is, the added observer is not called during current event but next event.<br/>
            However, the added observer can be safely removed during the same event.
            </para>
            <para>
            The same observer cannot be registered on the same observable twice or more.
            Equality of observer is checked by <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:CivObservable.Observable`1.CountOfPriority">
            <summary>
            The count of priorities of an observer to this observable.
            </summary>
        </member>
        <member name="M:CivObservable.Observable`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.Observable`1"/> class.
            </summary>
            <param name="countOfPriority">The count of priorities of an observer to this observable.</param>
        </member>
        <member name="M:CivObservable.Observable`1.AddObserver(`0,System.Int32)">
            <summary>
            Registers an observer object.
            </summary>
            <param name="observer">The observer.</param>
            <param name="priority">The priority of the observer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="priority"/> is invalid</exception>
            <exception cref="T:System.ArgumentException"><paramref name="observer"/> is already registered</exception>
            <seealso cref="M:CivObservable.Observable`1.RemoveObserver(`0)"/>
        </member>
        <member name="M:CivObservable.Observable`1.RemoveObserver(`0)">
            <summary>
            Removes a registered observer object.
            </summary>
            <param name="observer">The observer.</param>
            <exception cref="T:System.ArgumentException">observer is not registered</exception>
            <seealso cref="M:CivObservable.Observable`1.AddObserver(`0,System.Int32)"/>
        </member>
        <member name="M:CivObservable.Observable`1.IterateObserver(System.Action{`0})">
            <summary>
            Iterates through the registered observers.
            </summary>
            <param name="action">The action to do in iteration.</param>
        </member>
        <member name="T:CivObservable.ObservableEvent`2">
            <summary>
            Represents an observable event.
            </summary>
            <typeparam name="Observer">The type of the observer.</typeparam>
            <typeparam name="Priority">
            The type of the priority. This must be enumeration type of <see cref="T:System.Int32"/> where all of values are non-negative.
            </typeparam>
            <seealso cref="T:CivObservable.IObservable`2" />
            <seealso cref="T:CivObservable.FixedEvent`1"/>
            <seealso cref="T:CivObservable.FixedObservableEvent`3"/>
        </member>
        <member name="M:CivObservable.ObservableEvent`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CivObservable.ObservableEvent`2"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Priority is not an enumeration type of int
            or
            one of values of Priority enumeration is negative
            </exception>
        </member>
        <member name="M:CivObservable.ObservableEvent`2.AddObserver(`0,`1)">
            <summary>
            Registers an observer object.
            </summary>
            <param name="observer">The observer.</param>
            <param name="priority">The priority of the observer.</param>
            <seealso cref="M:CivObservable.IObservable`2.RemoveObserver(`0)" />
        </member>
        <member name="M:CivObservable.ObservableEvent`2.RemoveObserver(`0)">
            <summary>
            Removes a registered observer object.
            </summary>
            <param name="observer">The observer.</param>
            <seealso cref="M:CivObservable.IObservable`2.AddObserver(`0,`1)" />
        </member>
        <member name="M:CivObservable.ObservableEvent`2.RaiseObservable(System.Action{`0})">
            <summary>
            Raises the observable event.
            </summary>
            <param name="action">The action to be called with observer.</param>
        </member>
        <member name="T:CivObservable.SafeIterationList`1">
            <summary>
            Represents a collection can be modified safely during <see langword="foreach"/> iteration.
            </summary>
            <remarks>
            This class is not thread safe.
            </remarks>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
        </member>
        <member name="P:CivObservable.SafeIterationList`1.Count">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에 포함된 요소 수를 가져옵니다.
            </summary>
        </member>
        <member name="P:CivObservable.SafeIterationList`1.IsReadOnly">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.
            </summary>
        </member>
        <member name="P:CivObservable.SafeIterationList`1.IsWorking">
            <summary>
            이 <see cref="T:CivObservable.SafeIterationList`1"/> 개체에 대한 작업이 진행중인지 여부를 나타내는 값을 가져옵니다.
            </summary>
            <remarks>
            이 값이 <c>true</c>이면 이 객체에 대한 작업이 순회 작업과 동시에 일어날 수 있도록 처리됩니다.
            </remarks>
            <seealso cref="M:CivObservable.SafeIterationList`1.GetEnumerator"/>
        </member>
        <member name="P:CivObservable.SafeIterationList`1.Item(System.Int32)">
            <summary>
            읽기 전용 목록에서 지정된 인덱스의 요소를 가져옵니다.
            </summary>
            <param name="index">가져올 요소의 0부터 시작하는 인덱스입니다.</param>
            <returns>읽기 전용 목록에서 지정된 인덱스의 요소입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0
            or
            <paramref name="index"/> is equal to or greater than <see cref="P:CivObservable.SafeIterationList`1.Count"/>.
            </exception>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.Add(`0)">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.
            </summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.Remove(`0)">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.
            </summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
            <returns>
            <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.
            이 메서드는 <see langword="false" />이 원래 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.ICollection`1" />를 반환합니다.
            </returns>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.Clear">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.
            </summary>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.Contains(`0)">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 값이 들어 있는지 여부를 확인합니다.
            </summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
            <returns>
            <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.
            </returns>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.GetEnumerator">
            <summary>
            컬렉션을 반복하는 열거자를 반환합니다. 열거하는 동안 <see cref="P:CivObservable.SafeIterationList`1.IsWorking"/>은 <c>true</c>가 됩니다.
            </summary>
            <returns>
            컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.
            </returns>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.Reverse">
            <summary>
            시퀀스의 요소 순서를 반전합니다.
            </summary>
            <returns>시퀀스의 요소 순서를 뒤집은 시퀀스입니다.</returns>
        </member>
        <member name="M:CivObservable.SafeIterationList`1.CopyTo(`0[],System.Int32)">
            <summary>
            특정 <see cref="T:System.Collections.Generic.ICollection`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.
            </summary>
            <param name="array"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
            <param name="arrayIndex"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex - arrayIndex is less than 0</exception>
            <exception cref="T:System.ArgumentException">The available space from arrayIndex to the end of the destination array is not enough</exception>
        </member>
    </members>
</doc>
