<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CivModel</name>
    </assembly>
    <members>
        <member name="T:CivModel.AttackActorAction">
            <summary>
            Represents an attack action.
            </summary>
            <seealso cref="T:CivModel.IActorAction" />
        </member>
        <member name="P:CivModel.AttackActorAction.Owner">
            <summary>
            The <see cref="T:CivModel.Actor" /> object which has this action.
            </summary>
        </member>
        <member name="P:CivModel.AttackActorAction.IsParametered">
            <summary>
            Whether the action has a target parameter or not.
            </summary>
        </member>
        <member name="M:CivModel.AttackActorAction.#ctor(CivModel.Actor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.AttackActorAction"/> class.
            </summary>
            <param name="owner">The <see cref="T:CivModel.Actor"/> who will own the action.</param>
            <param name="isMoving">
              <c>true</c> if this action is <strong>moving attack</strong>.
              <c>false</c> if this action is <strong>holding attack</strong>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CivModel.AttackActorAction.GetRequiredAP(System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Test if the action with given parameter is valid and return required AP to act.
            Returns <c>-1</c> if the action is invalid.
            </summary>
            <param name="pt">the parameter with which action will be tested.</param>
            <returns>
            the required AP to act. If the action is invalid, <c>-1</c>.
            </returns>
        </member>
        <member name="M:CivModel.AttackActorAction.Act(System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Acts the specified pt.
            </summary>
            <param name="pt">The pt.</param>
            <exception cref="T:System.ArgumentException">parameter is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Actor is not placed yet</exception>
        </member>
        <member name="T:CivModel.IReadOnlyActorAction">
            <summary>
            The read-only version of <see cref="T:CivModel.IActorAction"/>.
            </summary>
        </member>
        <member name="P:CivModel.IReadOnlyActorAction.Owner">
            <summary>
            The <see cref="T:CivModel.Actor"/> object which has this action.
            </summary>
        </member>
        <member name="P:CivModel.IReadOnlyActorAction.IsParametered">
            <summary>
            Whether the action has a target parameter or not.
            </summary>
        </member>
        <member name="M:CivModel.IReadOnlyActorAction.GetRequiredAP(System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Test if the action with given parameter is valid and return required AP to act.
            Returns <c>-1</c> if the action is invalid.
            </summary>
            <param name="pt">the parameter with which action will be tested.</param>
            <returns>
            the required AP to act. If the action is invalid, <c>-1</c>.
            </returns>
        </member>
        <member name="T:CivModel.IActorAction">
            <summary>
            Represents an action which <see cref="T:CivModel.Actor"/> can do.
            </summary>
            <seealso cref="T:CivModel.IReadOnlyActorAction" />
        </member>
        <member name="M:CivModel.IActorAction.Act(System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Acts with the specified parameter.
            </summary>
            <param name="pt">The parameter.</param>
            <exception cref="T:System.ArgumentException">the parameter is invalid.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:CivModel.IReadOnlyActorAction.Owner"/> of this action is not placed yet.</exception>
        </member>
        <member name="T:CivModel.ActorAction">
            <summary>
            Provides a set of static methods for <see cref="T:CivModel.IReadOnlyActorAction"/>.
            </summary>
        </member>
        <member name="M:CivModel.ActorAction.IsActable(CivModel.IReadOnlyActorAction,System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Test whether the action is actable with specified parameter.
            </summary>
            <param name="action">the action.</param>
            <param name="pt">the parameter with which action will be tested.</param>
            <returns>
              <c>true</c> if the action is actable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CivModel.ITurnObserver">
            <summary>
            The interface to observe pre/post turn event.
            </summary>
            <seealso cref="T:CivModel.Game"/>
        </member>
        <member name="M:CivModel.ITurnObserver.PreTurn">
            <summary>
            Called before a turn.
            </summary>
        </member>
        <member name="M:CivModel.ITurnObserver.PostTurn">
            <summary>
            Called after a turn.
            </summary>
        </member>
        <member name="M:CivModel.ITurnObserver.PrePlayerSubTurn(CivModel.Player)">
            <summary>
            Called before a sub turn.
            </summary>
            <param name="playerInTurn">The player which the sub turn is dedicated to.</param>
        </member>
        <member name="M:CivModel.ITurnObserver.PostPlayerSubTurn(CivModel.Player)">
            <summary>
            Called after a sub turn.
            </summary>
            <param name="playerInTurn">The player which the sub turn is dedicated to.</param>
        </member>
        <member name="T:CivModel.MoveActorAction">
            <summary>
            Represents an movement action.
            </summary>
            <seealso cref="T:CivModel.IActorAction" />
        </member>
        <member name="P:CivModel.MoveActorAction.Owner">
            <summary>
            The <see cref="T:CivModel.Actor" /> object which has this action.
            </summary>
        </member>
        <member name="P:CivModel.MoveActorAction.IsParametered">
            <summary>
            Whether the action has a target parameter or not.
            </summary>
        </member>
        <member name="M:CivModel.MoveActorAction.#ctor(CivModel.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.MoveActorAction"/> class.
            </summary>
            <param name="owner">The <see cref="T:CivModel.Actor"/> who will own the action.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CivModel.MoveActorAction.GetRequiredAP(System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Test if the action with given parameter is valid and return required AP to act.
            Returns <c>-1</c> if the action is invalid.
            </summary>
            <param name="pt">the parameter with which action will be tested.</param>
            <returns>
            the required AP to act. If the action is invalid, <c>-1</c>.
            </returns>
        </member>
        <member name="M:CivModel.MoveActorAction.Act(System.Nullable{CivModel.Terrain.Point})">
            <summary>
            Acts with the specified parameter.
            </summary>
            <param name="pt">The parameter.</param>
            <exception cref="T:System.ArgumentException">parameter is invalid</exception>
            <exception cref="T:System.InvalidOperationException">Owner of this action is not placed yet</exception>
        </member>
        <member name="T:CivModel.Position">
            <summary>
            Represents the coordinate for <see cref="T:CivModel.Terrain"/>.
            The coordinate system is documented in "docs/Coordinate System.pptx".
            </summary>
        </member>
        <member name="P:CivModel.Position.X">
            <summary>
            X in physical coordinate system.
            </summary>
        </member>
        <member name="P:CivModel.Position.Y">
            <summary>
            Y in physical coordinate system.
            </summary>
        </member>
        <member name="P:CivModel.Position.A">
            <summary>
            A in logical coordinate system.
            </summary>
        </member>
        <member name="P:CivModel.Position.B">
            <summary>
            B in logical coordinate system.
            </summary>
        </member>
        <member name="P:CivModel.Position.C">
            <summary>
            C in logical coordinate system.
            </summary>
        </member>
        <member name="M:CivModel.Position.FromPhysical(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Position"/> structure from the physical coordinates.
            </summary>
            <param name="x">X in physical coordinate system.</param>
            <param name="y">Y in physical coordinate system.</param>
            <returns>the created <see cref="T:CivModel.Position"/></returns>
        </member>
        <member name="M:CivModel.Position.FromLogical(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Position"/> structure from the logical coordinates.
            </summary>
            <param name="a">A in logical coordinate system.</param>
            <param name="b">B in logical coordinate system.</param>
            <param name="c">C in logical coordinate system.</param>
            <returns>the created <see cref="T:CivModel.Position"/></returns>
            <exception cref="T:System.ArgumentException">logical coordinate is invalid</exception>
        </member>
        <member name="M:CivModel.Position.op_UnaryPlus(CivModel.Position)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.op_UnaryNegation(CivModel.Position)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.op_Addition(CivModel.Position,CivModel.Position)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.op_Subtraction(CivModel.Position,CivModel.Position)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.op_Multiply(System.Int32,CivModel.Position)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.Norm">
            <summary>
            Get norm of this position. It is equal to <c>(|A| + |B| + |C|) / 2</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CivModel.Position.Distance(CivModel.Position,CivModel.Position)">
            <summary>
            Get the distance between two <see cref="T:CivModel.Position"/>.
            It is equal to <c>(<paramref name="lhs"/> - <paramref name="rhs"/>).<see cref="M:CivModel.Position.Norm"/>()</c>.
            </summary>
            <param name="lhs">left hand side parameter</param>
            <param name="rhs">right hand side parameter</param>
            <returns></returns>
        </member>
        <member name="M:CivModel.Position.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CivModel.Position.op_Equality(CivModel.Position,CivModel.Position)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.op_Inequality(CivModel.Position,CivModel.Position)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CivModel.Position.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:CivModel.IProductionFactory">
            <summary>
            The factory interface of <see cref="T:CivModel.Production"/>
            </summary>
            <seealso cref="M:CivModel.Player.GetAvailableProduction"/>
            <seealso cref="P:CivModel.Common.CityCenter.AvailableProduction"/>
            <seealso cref="P:CivModel.Player.AdditionalAvailableProduction"/>
        </member>
        <member name="M:CivModel.IProductionFactory.Create(CivModel.Player)">
            <summary>
            Creates the <see cref="T:CivModel.Production"/> object
            </summary>
            <param name="owner">The player who owns the <see cref="T:CivModel.Production"/> object.</param>
            <returns>the created <see cref="T:CivModel.Production"/> object</returns>
        </member>
        <member name="T:CivModel.Production">
            <summary>
            An abstract class represents a production.
            </summary>
        </member>
        <member name="P:CivModel.Production.Factory">
            <summary>
            The factory object of this production kind.
            </summary>
        </member>
        <member name="P:CivModel.Production.Owner">
            <summary>
            The player who owns this production.
            </summary>
        </member>
        <member name="P:CivModel.Production.TotalCost">
            <summary>
            The total cost to finish this production.
            </summary>
        </member>
        <member name="P:CivModel.Production.CapacityPerTurn">
            <summary>
            The maximum labor which can put into this production per turn.
            </summary>
        </member>
        <member name="P:CivModel.Production.LaborInputed">
            <summary>
            The total labor inputed so far.
            </summary>
        </member>
        <member name="P:CivModel.Production.EstimatedLaborInputing">
            <summary>
            This property is updated by <see cref="M:CivModel.Player.EstimateLaborInputing"/>.
            You must call that function before use this property.
            </summary>
        </member>
        <member name="P:CivModel.Production.Completed">
            <summary>
            Whether this production is completed.
            </summary>
        </member>
        <member name="M:CivModel.Production.#ctor(CivModel.IProductionFactory,CivModel.Player,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Production"/> class.
            </summary>
            <param name="factory">The factory object of this production kind.</param>
            <param name="owner">The <see cref="T:CivModel.Player"/> who will own the production.</param>
            <param name="totalCost"><see cref="P:CivModel.Production.TotalCost"/> of the production</param>
            <param name="capacityPerTurn"><see cref="P:CivModel.Production.CapacityPerTurn"/> of the production.</param>
            <exception cref="T:System.ArgumentException">totalCost is not positive</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacityPerTurn"/> is not in [0, <see cref="P:CivModel.Production.TotalCost"/>]</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="factory"/> is <c>null</c>
            or
            <paramref name="owner"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:CivModel.Production.GetAvailableInputLabor(System.Double)">
            <summary>
            check how much labor is inputed into this production in this turn
            </summary>
            <param name="labor">labor amount which you want to put</param>
            <returns>maximum labor amount possible to put, less than <paramref name="labor"/></returns>
        </member>
        <member name="M:CivModel.Production.InputLabor(System.Double)">
            <summary>
            input labor into this production
            </summary>
            <param name="labor">labor amount to input</param>
            <returns>labor amount which is really used. it can be different from the parameter.</returns>
        </member>
        <member name="M:CivModel.Production.IsPlacable(CivModel.Terrain.Point)">
            <summary>
            Determines whether the production result is placable at the specified point.
            </summary>
            <param name="point">The point to test to place the production result.</param>
            <returns>
              <c>true</c> if the production is placable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CivModel.Production.Place(CivModel.Terrain.Point)">
            <summary>
            Places the production result at the specified point.
            </summary>
            <param name="point">The point to place the production result.</param>
            <exception cref="T:System.InvalidOperationException">production is not completed yet</exception>
            <exception cref="T:System.ArgumentException">point is invalid</exception>
        </member>
        <member name="T:CivModel.Terrain">
            <summary>
            Represents a terrain of a game.
            </summary>
        </member>
        <member name="T:CivModel.Terrain.Point">
            <summary>
            Represents one tile of a <see cref="P:CivModel.Terrain.Point.Terrain"/>.
            </summary>
        </member>
        <member name="P:CivModel.Terrain.Point.Terrain">
            <summary>
            The <see cref="P:CivModel.Terrain.Point.Terrain"/> object.
            </summary>
        </member>
        <member name="P:CivModel.Terrain.Point.Position">
            <summary>
            The <see cref="P:CivModel.Terrain.Point.Position"/> where this tile is.
            </summary>
        </member>
        <member name="P:CivModel.Terrain.Point.Type">
            <summary>
            <see cref="T:CivModel.TerrainType"/> of the tile.
            </summary>
        </member>
        <member name="P:CivModel.Terrain.Point.Unit">
            <summary>
            The <see cref="P:CivModel.Terrain.Point.Unit"/> placed at the tile.
            </summary>
        </member>
        <member name="P:CivModel.Terrain.Point.TileBuilding">
            <summary>
            The <see cref="P:CivModel.Terrain.Point.TileBuilding"/> placed at the tile.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.Point.GetTileObject(CivModel.TileTag)">
            <summary>
            this function is used internally by <see cref="P:CivModel.Terrain.Point.Terrain"/> class and getters of <see cref="T:CivModel.Terrain.Point"/>.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.Point.SetTileObject(CivModel.TileObject)">
            <summary>
            this function is used internally by <see cref="P:CivModel.Terrain.Point.Terrain"/> class.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.Point.UnsetTileObject(CivModel.TileTag)">
            <summary>
            this function is used internally by <see cref="P:CivModel.Terrain.Point.Terrain"/> class.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.Point.#ctor(CivModel.Terrain,CivModel.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Terrain.Point"/> struct.
            </summary>
            <param name="terrain">The terrain object.</param>
            <param name="pos">The position where a tile will be.</param>
            <exception cref="T:System.ArgumentException"><paramref name="pos"/> is invalid.</exception>
        </member>
        <member name="M:CivModel.Terrain.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CivModel.Terrain.Point.op_Equality(CivModel.Terrain.Point,CivModel.Terrain.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Terrain.Point.op_Inequality(CivModel.Terrain.Point,CivModel.Terrain.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:CivModel.Terrain.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CivModel.Terrain.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CivModel.Terrain.Point.Adjacents">
            <summary>
            get adjacent points, in clockwise order.
            </summary>
            <remarks>
            Get the array of the adjacent points in clockwise order.
            If the position is invalid, the value is null.
            A first element of the array is the left one.
              1   2
            0  pt  3
              5   4
            </remarks>
            <returns>an array of the adjacent points</returns>
        </member>
        <member name="P:CivModel.Terrain.Width">
            <summary>
            The width of this terrain.
            </summary>
        </member>
        <member name="P:CivModel.Terrain.Height">
            <summary>
            The height of this terrain.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Terrain"/> class.
            </summary>
            <param name="width">The width of a terrain.</param>
            <param name="height">The height of a terrain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="width"/> is not positive
            or
            <paramref name="height"/> is not positive
            </exception>
        </member>
        <member name="M:CivModel.Terrain.GetPoint(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:CivModel.Terrain.Point"/> from physical coordinates.
            </summary>
            <param name="x">X in physical coordinate.</param>
            <param name="y">Y in physical coordinate.</param>
            <returns>the <see cref="T:CivModel.Terrain.Point"/> object</returns>
            <exception cref="T:System.ArgumentException">coordinate is invalid.</exception>
        </member>
        <member name="M:CivModel.Terrain.GetPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:CivModel.Terrain.Point"/> from logical coordinates.
            </summary>
            <param name="a">A in logical coordinate.</param>
            <param name="b">B in logical coordinate.</param>
            <param name="c">C in logical coordinate.</param>
            <returns>the <see cref="T:CivModel.Terrain.Point"/> object</returns>
            <exception cref="T:System.ArgumentException">coordinate is invalid.</exception>
        </member>
        <member name="M:CivModel.Terrain.GetPoint(CivModel.Position)">
            <summary>
            Gets the <see cref="T:CivModel.Terrain.Point"/> from <see cref="T:CivModel.Position"/>
            </summary>
            <param name="pos">The <see cref="T:CivModel.Position"/> object.</param>
            <returns>the <see cref="T:CivModel.Terrain.Point"/> objec</returns>
        </member>
        <member name="M:CivModel.Terrain.PlaceObject(CivModel.TileObject)">
            <summary>
            this function is used by the setter of <see cref="P:CivModel.TileObject.PlacedPoint"/>.
            In general case you should use <see cref="P:CivModel.TileObject.PlacedPoint"/> instead.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.UnplaceObject(CivModel.TileObject,CivModel.Terrain.Point)">
            <summary>
            this function is used by the setter of <see cref="P:CivModel.TileObject.PlacedPoint"/>.
            In general case you should use <see cref="P:CivModel.TileObject.PlacedPoint"/> instead.
            </summary>
        </member>
        <member name="M:CivModel.Terrain.IsValidPosition(CivModel.Position)">
            <summary>
            Determines whether the specified position is vaild.
            </summary>
            <param name="pos">The <see cref="T:CivModel.Position"/> object.</param>
            <returns>
              <c>true</c> if the specified position is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CivModel.TileBuilding">
            <summary>
            Represents a building which is an actor.
            </summary>
            <seealso cref="T:CivModel.Actor" />
        </member>
        <member name="P:CivModel.TileBuilding.MaxAP">
            <summary>
            The maximum AP. <c>0</c> by default.
            </summary>
        </member>
        <member name="P:CivModel.TileBuilding.MoveAct">
            <summary>
            The action performing movement. <c>null</c> by default.
            </summary>
        </member>
        <member name="M:CivModel.TileBuilding.#ctor(CivModel.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.TileBuilding"/> class.
            </summary>
            <param name="owner">The player who owns this TileBuilding.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="T:CivModel.Common.CityCenter">
            <summary>
            Represents a city as <see cref="T:CivModel.TileBuilding"/>.
            </summary>
            <seealso cref="T:CivModel.TileBuilding" />
        </member>
        <member name="P:CivModel.Common.CityCenter.MaxHP">
            <summary>
            The maximum HP. <c>0</c> if this actor is not a combattant.
            </summary>
        </member>
        <member name="P:CivModel.Common.CityCenter.MaxHealPerTurn">
            <summary>
            The maximum heal per turn.
            </summary>
            <seealso cref="P:CivModel.Actor.RemainHP" />
        </member>
        <member name="P:CivModel.Common.CityCenter.AttackPower">
            <summary>
            The attack power.
            </summary>
        </member>
        <member name="P:CivModel.Common.CityCenter.DefencePower">
            <summary>
            The defence power.
            </summary>
        </member>
        <member name="P:CivModel.Common.CityCenter.HoldingAttackAct">
            <summary>
            The action performing movement. <c>null</c> if this actor cannot do.
            </summary>
        </member>
        <member name="P:CivModel.Common.CityCenter.AvailableProduction">
            <summary>
            The list of available production from this city.
            </summary>
            <seealso cref="M:CivModel.Player.GetAvailableProduction"/>
        </member>
        <member name="M:CivModel.Common.CityCenter.#ctor(CivModel.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Common.CityCenter"/> class.
            </summary>
            <param name="owner">The player who owns this city.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CivModel.Common.CityCenter.OnBeforeChangeOwner(CivModel.Player)">
            <summary>
            Called before [change owner], by <see cref="M:CivModel.Actor.ChangeOwner(CivModel.Player)" />.
            </summary>
            <param name="newOwner">The new owner.</param>
        </member>
        <member name="M:CivModel.Common.CityCenter.OnBeforeDestroy">
            <summary>
            Called before [destroy], by <see cref="M:CivModel.Actor.Destroy" />
            </summary>
        </member>
        <member name="M:CivModel.Common.CityCenter.OnDie(CivModel.Player)">
            <summary>
            Called when [die] by <see cref="M:CivModel.Actor.Die(CivModel.Player)" />.
            The default implementation calls <see cref="M:CivModel.Actor.Destroy" />.
            </summary>
            <param name="opposite">The opposite who caused the dying of this actor. If not exists, <c>null</c>.</param>
        </member>
        <member name="T:CivModel.Common.Pioneer">
            <summary>
            A pionner unit who can make city.
            </summary>
            <seealso cref="T:CivModel.Unit" />
        </member>
        <member name="P:CivModel.Common.Pioneer.MaxAP">
            <summary>
            The maximum AP.
            </summary>
        </member>
        <member name="P:CivModel.Common.Pioneer.SpecialActs">
            <summary>
            The list of special actions.
            <see cref="T:CivModel.Common.Pioneer"/> have one special action "pionnering".
            </summary>
        </member>
        <member name="M:CivModel.Common.Pioneer.#ctor(CivModel.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Common.Pioneer"/> class.
            </summary>
            <param name="owner">The <see cref="T:CivModel.Player"/> who owns this unit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="T:CivModel.Common.PioneerProductionFactory">
            <summary>
            The factory interface for <see cref="T:CivModel.Common.Pioneer"/>.
            </summary>
            <seealso cref="T:CivModel.ITileObjectProductionFactory" />
        </member>
        <member name="P:CivModel.Common.PioneerProductionFactory.Instance">
            <summary>
            The singleton instance.of <see cref="T:CivModel.Common.PioneerProductionFactory"/>
            </summary>
        </member>
        <member name="M:CivModel.Common.PioneerProductionFactory.Create(CivModel.Player)">
            <summary>
            Creates the <see cref="T:CivModel.Production" /> object
            </summary>
            <param name="owner">The player who owns the <see cref="T:CivModel.Production" /> object.</param>
            <returns>
            the created <see cref="T:CivModel.Production" /> object
            </returns>
        </member>
        <member name="M:CivModel.Common.PioneerProductionFactory.IsPlacable(CivModel.TileObjectProduction,CivModel.Terrain.Point)">
            <summary>
            Determines whether the production result is placable at the specified point.
            </summary>
            <param name="production">The production.</param>
            <param name="point">The point to test to place the production result.</param>
            <returns>
              <c>true</c> if the production is placable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CivModel.Common.PioneerProductionFactory.CreateTileObject(CivModel.Player)">
            <summary>
            Creates the <see cref="T:CivModel.TileObject" /> which is the production result.
            </summary>
            <param name="owner">The <see cref="T:CivModel.Player" /> who owns the result.</param>
            <returns>
            the created <see cref="T:CivModel.TileObject" /> result.
            </returns>
        </member>
        <member name="T:CivModel.Game">
            <summary>
            Represents one civ game.
            </summary>
        </member>
        <member name="P:CivModel.Game.GoldCoefficient">
            <summary>
            Coefficient for <see cref="P:CivModel.Player.GoldIncome"/>.
            </summary>
        </member>
        <member name="P:CivModel.Game.PopulationCoefficient">
            <summary>
            Coefficient for PopulationIncome.
            </summary>
        </member>
        <member name="P:CivModel.Game.HappinessCoefficient">
            <summary>
            Coefficient for <see cref="P:CivModel.Player.HappinessIncome"/>.
            </summary>
        </member>
        <member name="P:CivModel.Game.LaborCoefficient">
            <summary>
            Coefficient for <see cref="P:CivModel.Player.Labor"/>.
            </summary>
        </member>
        <member name="P:CivModel.Game.LaborHappinessConstant">
            <summary>
            Coefficient for <see cref="P:CivModel.Player.Labor"/>, which works with <see cref="P:CivModel.Player.Happiness"/>.
            </summary>
        </member>
        <member name="P:CivModel.Game.Terrain">
            <summary>
            <see cref="P:CivModel.Game.Terrain"/> of this game.
            </summary>
        </member>
        <member name="P:CivModel.Game.Players">
            <summary>
            The players of this game.
            </summary>
        </member>
        <member name="P:CivModel.Game.SubTurnNumber">
            <summary>
            The subturn number.
            </summary>
            <remarks>
            Subturn represents a part of turn, dedicated to each player.
            </remarks>
        </member>
        <member name="P:CivModel.Game.TurnNumber">
            <summary>
            The turn number.
            </summary>
        </member>
        <member name="P:CivModel.Game.IsInsideTurn">
            <summary>
            Gets a value indicating whether this game is inside a turn.
            </summary>
        </member>
        <member name="P:CivModel.Game.PlayerNumberInTurn">
            <summary>
            Gets the index of <see cref="P:CivModel.Game.PlayerInTurn"/>.
            </summary>
        </member>
        <member name="P:CivModel.Game.PlayerInTurn">
            <summary>
            The player who plays in this turn.
            </summary>
        </member>
        <member name="M:CivModel.Game.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Game"/> class.
            </summary>
            <param name="width">The width of the <see cref="P:CivModel.Game.Terrain"/> of this game. It must be positive.</param>
            <param name="height">The height of the <see cref="P:CivModel.Game.Terrain"/> of this game. It must be positive.</param>
            <param name="numOfPlayer">The number of player. It must be positive.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="width"/> is not positive
            or
            <paramref name="height"/> is not positive
            or
            <paramref name="numOfPlayer"/> is not positive
            </exception>
        </member>
        <member name="M:CivModel.Game.StartTurn">
            <summary>
            Starts the turn.
            </summary>
            <exception cref="T:System.InvalidOperationException">this game is inside turn yet</exception>
        </member>
        <member name="M:CivModel.Game.EndTurn">
            <summary>
            Ends the turn.
            </summary>
            <exception cref="T:System.InvalidOperationException">the turn is not started yet</exception>
        </member>
        <member name="T:CivModel.BattleResult">
            <summary>
            The result of a battle. This is used by <see cref="M:CivModel.Actor.AttackTo(CivModel.Actor)"/>.
            </summary>
        </member>
        <member name="F:CivModel.BattleResult.Draw">
            <summary>
            Indicating that battle result is draw.
            </summary>
        </member>
        <member name="F:CivModel.BattleResult.Victory">
            <summary>
            Indicating that battle result is victory.
            </summary>
        </member>
        <member name="F:CivModel.BattleResult.Defeated">
            <summary>
            Indicating that battle result is defeated.
            </summary>
        </member>
        <member name="T:CivModel.Actor">
            <summary>
            An absract class represents the <see cref="T:CivModel.TileObject"/> which can have actions and action point (AP).
            </summary>
            <seealso cref="T:CivModel.TileObject" />
            <seealso cref="T:CivModel.ITurnObserver"/>
        </member>
        <member name="P:CivModel.Actor.Owner">
            <summary>
            The player who owns this actor.
            </summary>
        </member>
        <member name="P:CivModel.Actor.MaxAP">
            <summary>
            The maximum AP.
            </summary>
        </member>
        <member name="P:CivModel.Actor.RemainAP">
            <summary>
            The remaining AP. It is reset to <see cref="P:CivModel.Actor.MaxAP"/> when <see cref="M:CivModel.Actor.PreTurn"/> is called.
            </summary>
        </member>
        <member name="P:CivModel.Actor.SkipFlag">
            <summary>
            The flag indicating this actor is skipped in this turn. This flag is used by Presenter module.
            </summary>
        </member>
        <member name="P:CivModel.Actor.MoveAct">
            <summary>
            The action performing movement. <c>null</c> if this actor cannot do.
            </summary>
        </member>
        <member name="P:CivModel.Actor.HoldingAttackAct">
            <summary>
            The action performing movement. <c>null</c> if this actor cannot do.
            </summary>
        </member>
        <member name="P:CivModel.Actor.MovingAttackAct">
            <summary>
            The action performing moving attack. <c>null</c> if this actor cannot do.
            </summary>
        </member>
        <member name="P:CivModel.Actor.SpecialActs">
            <summary>
            The list of special actions. <c>null</c> if not exists.
            </summary>
        </member>
        <member name="P:CivModel.Actor.AttackPower">
            <summary>
            The attack power.
            </summary>
        </member>
        <member name="P:CivModel.Actor.DefencePower">
            <summary>
            The defence power.
            </summary>
        </member>
        <member name="P:CivModel.Actor.MaxHP">
            <summary>
            The maximum HP. <c>0</c> if this actor is not a combattant.
            </summary>
        </member>
        <member name="P:CivModel.Actor.MaxHealPerTurn">
            <summary>
            The maximum heal per turn.
            </summary>
            <seealso cref="P:CivModel.Actor.RemainHP" />
        </member>
        <member name="P:CivModel.Actor.RemainHP">
            <summary>
            The remaining AP. It must be in [0, <see cref="P:CivModel.Actor.MaxHP"/>].
            If this is lower than <see cref="P:CivModel.Actor.MaxHP"/>,
             this value is increased to min{<see cref="P:CivModel.Actor.MaxHP"/>, value + <see cref="P:CivModel.Actor.MaxHealPerTurn"/>}
             when <see cref="M:CivModel.Actor.PreTurn"/> is called.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:CivModel.Actor.RemainHP"/> is not in [0, <see cref="P:CivModel.Actor.MaxHP"/>]</exception>
        </member>
        <member name="M:CivModel.Actor.#ctor(CivModel.Player,CivModel.TileTag)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Actor"/> class.
            </summary>
            <param name="owner">The player who owns this actor.</param>
            <param name="tag">The <seealso cref="T:CivModel.TileTag"/> of this actor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CivModel.Actor.ChangeOwner(CivModel.Player)">
            <summary>
            Changes <see cref="P:CivModel.Actor.Owner"/>. <see cref="M:CivModel.Actor.OnBeforeChangeOwner(CivModel.Player)"/> is called before the property is changed.
            </summary>
            <param name="newOwner">The new owner.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newOwner"/> is null.</exception>
        </member>
        <member name="M:CivModel.Actor.OnBeforeChangeOwner(CivModel.Player)">
            <summary>
            Called before [change owner], by <see cref="M:CivModel.Actor.ChangeOwner(CivModel.Player)"/>.
            </summary>
            <param name="newOwner">The new owner.</param>
        </member>
        <member name="M:CivModel.Actor.Destroy">
            <summary>
            Destroys this actor. <see cref="M:CivModel.Actor.OnBeforeDestroy"/> is called before the actor is destroyed.
            </summary>
            <remarks>
            <strong>postcondition</strong>:
            <c><see cref="P:CivModel.TileObject.PlacedPoint"/> == null &amp;&amp; <see cref="P:CivModel.Actor.Owner"/> == null</c>
            </remarks>
        </member>
        <member name="M:CivModel.Actor.OnBeforeDestroy">
            <summary>
            Called before [destroy], by <see cref="M:CivModel.Actor.Destroy"/>
            </summary>
        </member>
        <member name="M:CivModel.Actor.CanConsumeAP(System.Int32)">
            <summary>
            Determines whether this actor can consume the specified amount of AP.
            </summary>
            <param name="amount">The amount of AP</param>
            <returns>
              <c>true</c> if this actor can consume the specified amount of AP; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="amount"/> is negative</exception>
        </member>
        <member name="M:CivModel.Actor.ConsumeAP(System.Int32)">
            <summary>
            Consumes the specified amount of AP.
            </summary>
            <param name="amount">The amount of AP</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="amount"/> is negative
            or
            <paramref name="amount"/> is bigger than <see cref="P:CivModel.Actor.RemainAP"/>
            </exception>
        </member>
        <member name="M:CivModel.Actor.ConsumeAllAP">
            <summary>
            Consumes all of AP which this actor has.
            </summary>
            <seealso cref="M:CivModel.Actor.ConsumeAP(System.Int32)"/>
        </member>
        <member name="M:CivModel.Actor.AttackTo(CivModel.Actor)">
            <summary>
            Attacks to another <see cref="T:CivModel.Actor"/>.
            </summary>
            <param name="opposite">The opposite.</param>
            <returns>
              <see cref="T:CivModel.BattleResult"/> indicating the result of this battle.
              if <paramref name="opposite"/> has died, <see cref="F:CivModel.BattleResult.Victory"/>.
              if this object has died, <see cref="F:CivModel.BattleResult.Defeated"/>.
              if both have died or survived, <see cref="F:CivModel.BattleResult.Draw"/>.
            </returns>
        </member>
        <member name="M:CivModel.Actor.GetRequiredAPToMove(CivModel.Terrain.Point)">
            <summary>
            Gets the required AP to move to the specified target point from the near.
            </summary>
            <param name="target">The target point</param>
            <returns>the required AP. if this actor cannot move to <paramref name="target"/>, <c>-1</c>.</returns>
        </member>
        <member name="M:CivModel.Actor.Die(CivModel.Player)">
            <summary>
            Make this actor die. This function calls <see cref="M:CivModel.Actor.OnDie(CivModel.Player)"/>.
            </summary>
            <param name="opposite">The opposite who caused the dying of this actor. If not exists, <c>null</c>.</param>
        </member>
        <member name="M:CivModel.Actor.OnDie(CivModel.Player)">
            <summary>
            Called when [die] by <see cref="M:CivModel.Actor.Die(CivModel.Player)"/>.
            The default implementation calls <see cref="M:CivModel.Actor.Destroy"/>.
            </summary>
            <param name="opposite">The opposite who caused the dying of this actor. If not exists, <c>null</c>.</param>
        </member>
        <member name="M:CivModel.Actor.PreTurn">
            <summary>
            Called before a turn.
            </summary>
        </member>
        <member name="M:CivModel.Actor.PostTurn">
            <summary>
            Called after a turn.
            </summary>
        </member>
        <member name="M:CivModel.Actor.PrePlayerSubTurn(CivModel.Player)">
            <summary>
            Called before a sub turn.
            </summary>
            <param name="playerInTurn">The player which the sub turn is dedicated to.</param>
        </member>
        <member name="M:CivModel.Actor.PostPlayerSubTurn(CivModel.Player)">
            <summary>
            Called after a sub turn.
            </summary>
            <param name="playerInTurn">The player which the sub turn is dedicated to.</param>
        </member>
        <member name="T:CivModel.TileTag">
            <summary>
            The value indicating the kind of <see cref="T:CivModel.TileObject"/>.
            </summary>
        </member>
        <member name="F:CivModel.TileTag.Unit">
            <summary>
            Tag for <see cref="F:CivModel.TileTag.Unit"/> object
            </summary>
        </member>
        <member name="F:CivModel.TileTag.TileBuilding">
            <summary>
            Tag for <see cref="F:CivModel.TileTag.TileBuilding"/> object
            </summary>
        </member>
        <member name="T:CivModel.TileObject">
            <summary>
            Represents an object which can be placed on <see cref="T:CivModel.Terrain.Point"/>.
            </summary>
        </member>
        <member name="P:CivModel.TileObject.TileTag">
            <summary>
            The value indicating the kind of this object.
            </summary>
        </member>
        <member name="P:CivModel.TileObject.PlacedPoint">
            <summary>
            The placed point of this object. <c>null</c> if not placed.
            </summary>
        </member>
        <member name="M:CivModel.TileObject.#ctor(CivModel.TileTag)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.TileObject"/> class.
            </summary>
            <param name="tileTag">The <see cref="P:CivModel.TileObject.TileTag"/> of a object.</param>
        </member>
        <member name="T:CivModel.Player">
            <summary>
            Represents a player of a game.
            </summary>
            <seealso cref="T:CivModel.ITurnObserver"/>
        </member>
        <member name="P:CivModel.Player.Gold">
            <summary>
            The gold of this player.
            </summary>
        </member>
        <member name="P:CivModel.Player.GoldIncome">
            <summary>
            The gold income of this player.
            </summary>
            <seealso cref="P:CivModel.Player.TaxRate"/>
            <seealso cref="P:CivModel.Game.GoldCoefficient"/>
        </member>
        <member name="P:CivModel.Player.Happiness">
            <summary>
            The happiness of this player. This value cannot exceed <c>100</c>.
            </summary>
        </member>
        <member name="P:CivModel.Player.HappinessIncome">
            <summary>
            The happiness income of this player.
            </summary>
            <seealso cref="P:CivModel.Game.HappinessCoefficient"/>
        </member>
        <member name="P:CivModel.Player.Labor">
            <summary>
            The labor per turn of this player.
            </summary>
            <seealso cref="P:CivModel.Game.LaborCoefficient"/>
            <seealso cref="P:CivModel.Game.LaborHappinessConstant"/>
        </member>
        <member name="P:CivModel.Player.TaxRate">
            <summary>
            The tax rate of this player. It affects <see cref="P:CivModel.Player.GoldIncome"/>.
            </summary>
            <exception cref="T:System.ArgumentException"><see cref="P:CivModel.Player.TaxRate"/> is not in [0, 1]</exception>
        </member>
        <member name="P:CivModel.Player.Units">
            <summary>
            The list of units of this player.
            </summary>
            <seealso cref="T:CivModel.Unit"/>
        </member>
        <member name="P:CivModel.Player.Cities">
            <summary>
            The list of cities of this player.
            </summary>
            <seealso cref="T:CivModel.Common.CityCenter"/>
        </member>
        <member name="P:CivModel.Player.Production">
            <summary>
            The list of the not-finished productions of this player.
            </summary>
            <seealso cref="P:CivModel.Player.Deployment"/>
        </member>
        <member name="P:CivModel.Player.Deployment">
            <summary>
            The list of the ready-to-deploy productions of this player.
            </summary>
            <seealso cref="P:CivModel.Player.Production"/>
        </member>
        <member name="P:CivModel.Player.AdditionalAvailableProduction">
            <summary>
            The list of additional available productions of this player.
            This list will added to the calculation of <see cref="M:CivModel.Player.GetAvailableProduction"/>
            </summary>
        </member>
        <member name="P:CivModel.Player.EstimatedUsedLabor">
            <summary>
            The estimated used labor in this turn.
            </summary>
            <remarks>
            This property is updated by <see cref="M:CivModel.Player.EstimateLaborInputing"/>.
            You must call that function before use this property.
            </remarks>
        </member>
        <member name="P:CivModel.Player.IsDefeated">
            <summary>
            Whether this player is defeated.
            </summary>
        </member>
        <member name="P:CivModel.Player.Game">
            <summary>
            The game which this player participates.
            </summary>
        </member>
        <member name="M:CivModel.Player.#ctor(CivModel.Game)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Player"/> class.
            </summary>
            <param name="game">The game which this player participates.</param>
        </member>
        <member name="M:CivModel.Player.AddUnitToList(CivModel.Unit)">
            <summary>
            this function is used by <see cref="T:CivModel.Unit"/> class
            </summary>
            <param name="unit">unit to add</param>
        </member>
        <member name="M:CivModel.Player.RemoveUnitFromList(CivModel.Unit)">
            <summary>
            this function is used by <see cref="T:CivModel.Unit"/> class
            </summary>
            <param name="unit">unit to remove</param>
        </member>
        <member name="M:CivModel.Player.AddCityToList(CivModel.Common.CityCenter)">
            <summary>
            this function is used by <see cref="T:CivModel.Common.CityCenter"/> class
            </summary>
            <param name="city">city to add</param>
        </member>
        <member name="M:CivModel.Player.RemoveCityFromList(CivModel.Common.CityCenter)">
            <summary>
            this function is used by <see cref="T:CivModel.Common.CityCenter"/> class
            </summary>
            <param name="city">city to remove</param>
        </member>
        <member name="M:CivModel.Player.GetAvailableProduction">
            <summary>
            Gets the list of available productions of this player.
            </summary>
            <remarks>
            The return value is the result of
            merging the result of <see cref="P:CivModel.Common.CityCenter.AvailableProduction"/> of all cities of this player
            and <see cref="P:CivModel.Player.AdditionalAvailableProduction"/>.
            </remarks>
            <returns>the list of available productions</returns>
        </member>
        <member name="M:CivModel.Player.PreTurn">
            <summary>
            Called before a turn.
            </summary>
        </member>
        <member name="M:CivModel.Player.PostTurn">
            <summary>
            Called after a turn.
            </summary>
        </member>
        <member name="M:CivModel.Player.PrePlayerSubTurn(CivModel.Player)">
            <summary>
            Called before a sub turn.
            </summary>
            <param name="playerInTurn">The player which the sub turn is dedicated to.</param>
        </member>
        <member name="M:CivModel.Player.PostPlayerSubTurn(CivModel.Player)">
            <summary>
            Called after a sub turn.
            </summary>
            <param name="playerInTurn">The player which the sub turn is dedicated to.</param>
        </member>
        <member name="M:CivModel.Player.EstimateLaborInputing">
            <summary>
            Update <see cref="P:CivModel.Production.EstimatedLaborInputing"/> property of all productions
            and <see cref="P:CivModel.Player.EstimatedUsedLabor"/> property  of this player.
            </summary>
        </member>
        <member name="T:CivModel.TerrainType">
            <summary>
            The type of a tile of <see cref="T:CivModel.Terrain"/>.
            </summary>
        </member>
        <member name="T:CivModel.Unit">
            <summary>
            Represents an unit.
            </summary>
            <seealso cref="T:CivModel.Actor" />
        </member>
        <member name="P:CivModel.Unit.MoveAct">
            <summary>
            The action performing movement. A <see cref="T:CivModel.MoveActorAction"/> object by default.
            </summary>
        </member>
        <member name="M:CivModel.Unit.#ctor(CivModel.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.Unit"/> class.
            </summary>
            <param name="owner">The <see cref="T:CivModel.Player"/> who owns this unit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CivModel.Unit.OnBeforeChangeOwner(CivModel.Player)">
            <summary>
            Called before [change owner], by <see cref="M:CivModel.Actor.ChangeOwner(CivModel.Player)" />.
            </summary>
            <param name="newOwner">The new owner.</param>
        </member>
        <member name="M:CivModel.Unit.OnBeforeDestroy">
            <summary>
            Called before [destroy], by <see cref="M:CivModel.Actor.Destroy" />
            </summary>
        </member>
        <member name="T:CivModel.ITileObjectProductionFactory">
            <summary>
            The factory interface of <see cref="T:CivModel.TileObjectProduction"/>.
            This interface additionally provides <see cref="M:CivModel.ITileObjectProductionFactory.IsPlacable(CivModel.TileObjectProduction,CivModel.Terrain.Point)"/>
             and <see cref="M:CivModel.ITileObjectProductionFactory.CreateTileObject(CivModel.Player)"/> methods.
            </summary>
            <seealso cref="T:CivModel.IProductionFactory" />
        </member>
        <member name="M:CivModel.ITileObjectProductionFactory.IsPlacable(CivModel.TileObjectProduction,CivModel.Terrain.Point)">
            <summary>
            Determines whether the production result is placable at the specified point.
            </summary>
            <param name="production">The production.</param>
            <param name="point">The point to test to place the production result.</param>
            <returns>
              <c>true</c> if the production is placable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CivModel.ITileObjectProductionFactory.CreateTileObject(CivModel.Player)">
            <summary>
            Creates the <see cref="T:CivModel.TileObject"/> which is the production result.
            </summary>
            <param name="owner">The <see cref="T:CivModel.Player"/> who owns the result.</param>
            <returns>the created <see cref="T:CivModel.TileObject"/> result.</returns>
        </member>
        <member name="T:CivModel.TileObjectProduction">
            <summary>
            The <see cref="T:CivModel.Production"/> class for <see cref="T:CivModel.TileObject"/>
            </summary>
            <seealso cref="T:CivModel.Production" />
        </member>
        <member name="M:CivModel.TileObjectProduction.#ctor(CivModel.ITileObjectProductionFactory,CivModel.Player,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CivModel.TileObjectProduction"/> class.
            </summary>
            <param name="factory">The factory object of this production kind.</param>
            <param name="owner">The <see cref="T:CivModel.Player"/> who will own the production.</param>
            <param name="totalCost"><see cref="P:CivModel.Production.TotalCost"/> of the production</param>
            <param name="capacityPerTurn"><see cref="P:CivModel.Production.CapacityPerTurn"/> of the production.</param>
            <exception cref="T:System.ArgumentException">totalCost is not positive</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacityPerTurn"/> is not in [0, <see cref="P:CivModel.Production.TotalCost"/>]</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="factory"/> is <c>null</c>
            or
            <paramref name="owner"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:CivModel.TileObjectProduction.IsPlacable(CivModel.Terrain.Point)">
            <summary>
            Determines whether the production result is placable at the specified point.
            </summary>
            <param name="point">The point to test to place the production result.</param>
            <returns>
              <c>true</c> if the production is placable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CivModel.TileObjectProduction.Place(CivModel.Terrain.Point)">
            <summary>
            Places the production result at the specified point.
            </summary>
            <param name="point">The point to place the production result.</param>
            <exception cref="T:System.InvalidOperationException">production is not completed yet</exception>
            <exception cref="T:System.ArgumentException">point is invalid</exception>
        </member>
    </members>
</doc>
